
成为一名熟练的程序员需要具备丰富的知识。需要掌握库、记住语法以及注意各种其他细节。更难的是，随着不断开发新技术和工具，技术格局也在不断发生变化。

对于一个新程序员来说，学习所有这些细节和跟上新的发展步伐似乎是一个不可能完成的任务。确实如此！实际上已经工作多年的专家级程序员也没有把百科全书中的知识装入大脑。但是他们掌握了快速查找信息的方法。

如何搜索
以下是一些有用的网页搜索技巧：

尝试使用 "Python" 或正在使用的库的名称作为查询的第一个词。这会提示搜索引擎优先考虑与你所使用工具明确相关的结果。

可以多次尝试较好的搜索查询。如果第一次尝试未查找到有用的结果，请重试。

尝试使用初始搜索时，在页面上找到的关键词，以便于后续搜索时，将搜索引擎引导到更好的资源。

复制并粘贴错误消息，将其作为搜索关键词，这会找到错误解释和可能的错误原因。错误消息可能包括引用所编写代码的特定行号。
搜索时，仅包括在此之前出现的部分错误消息。

如果找不到问题的答案，请自己询问！像 Stackoverflow 这样的社区具有某些礼节规定，如果想参与，就必须学习这些礼节，
但不要让这些礼节影响大家对资源的使用。


在线资源的层次结构
虽然关于编程的在线资源数不胜数，但并不是所有资源都是平等的。资源列表列出了可靠性的大致顺序。

Python 教程 - 这部分官方文档涉及 Python 语法和标准库的相关研究。该文档采用各种示例，并且使用比主文档更少的技术语言编写。
确保大家阅读 Python3 的文档版本！

Python 语言和库引用 - 相对于教程，语言引用和库引用采用了更多的技术性语言，但这才是最终的真理之源。
随着越来越熟悉 Python，大家应越来越多地开始利用这些资源。

第三方库文档 - 第三方库在自己的网站上发布文档，也经常在 https://readthedocs.org/ 上发布。
大家可以通过其文档的质量判断第三方库的质量。如果开发人员没有时间编写好文档，那么他们可能也没有时间研究自己的库。

知名专家的网站和博客 - 之前的资源为主要资源，这意味着这些文档出自编写代码的相同人员之手。
主要资源是最可靠的，次要来源也极具价值。次要来源的难点在于确定来源的可信度。像 Doug Hellmann 和 Eli Bendersky 都是非常优秀的开发人员。
一个未知作者的博客可能极具价值，也可能是垃圾。

Stackoverflow - 这个问答网站的访问量很大，所以有可能有人提问过（有人回答了）一个相关问题！
然而，答案由志愿者提供，所以质量不一。在将其放入程序之前，请务必了解相关解决方案。如果答案没有任何解释，可疑性就很大。
这是找到更多问题解决方案或发现替代搜索词的好地方。

Bug 跟踪器 - 有时会遇到一个非常罕见或新的问题，而且 Stackoverflow 上也没有人解决过这个问题。
例如，你可能会在 GitHub 的错误报告中引用自己的错误。这些错误报告可能会有帮助，但为了解决这个问题，可能还需要将之前的工作再重复一遍。

其它网络论坛 - 有时候搜索可能会引用自 2004 年以来悄无生机的论坛，或类似的历史论坛。如果这些是解决问题的唯一资源，那应该重新考虑问题的解决方案。
