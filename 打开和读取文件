
要读取文件，必须先打开文件，我们可以使用 open 函数。我们提供一个文件所在的路径，也可以指定几个可选参数。然后将该函数返回的值赋给一个变量。例如：

f = open('/my_path/my_file.txt','r')
open 函数将返回一个文件对象 —— 一种 Python 对象，通过该对象 Python 可以与文件交互。

在该示例中，第二个参数 r 指定了打开文件的模式，在该示例中以只读模式打开（原因是我们只想读取文件，不改变文件内容）。我们不需要指定这个参数，因为默认情况下（如果未指定模式）open 将以只读模式打开文件。

接下来，为了访问文件的内容，我们可以使用 read。f.read() 创建一个包含文件文本的字符串对象。使用该字符串为名为 file_data 的变量赋值：

file_data = f.read()
使用文件 f 完成操作后，应关闭文件。这可释放出该文件所占用的系统资源：

f.close()
如果不再需要，则应务必关闭打开的文件。如果打开大量的文件，却不关闭，我们可能会耗尽文件句柄（file handle），而无法打开任何新文件（在耗尽文件句柄之前，能够打开的文件数量完全取决于你的操作系统）。

如果不信，可以尝试在 python 解释器中运行以下内容：

>>> files = []
>>> for i in range(100000):
...     files.append(open('somefile.txt'))
尝试在 for 循环中编辑 range 中的数字。有时候，对于较大的数字，可能会出现一个错误提示。

Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
OSError: [Errno 24] Too many open files: 'somefile.txt'
>>> i
7164
我们可以看到，在打开 7164 个文件后，系统不再具有打开任何新文件的可用资源。为了避免这种情况，最好关闭任何不需要的文件。

写入文件
除了读取外，还可以写入文件，这样将更改文件内容。为此，必须以写入模式打开文件：

f = open('/my_path/my_file.txt','w')
注意：一旦以写入模式打开文件，文件之前的任何内容将被删除。如果你对在现有的文件中添加内容感兴趣（不删除文件内容），应该使用 append，而不是 write，并以添加模式打开（使用 a，而不是 w）。请访问 python 文档，了解关于文件不同打开模式的更多信息。

如果文件不存在，python 将为你创建一个文件。

现在我们可以写入文件：

f.write("Hello World!")
完成后，关闭文件，利人利己。

f.close()
with
Python 中使用 with 可以允许你打开一个文件，对其进行各种操作，然后自动关闭该文件。

>>> with open('/my_path/my_file.txt','r') as f:
>>>   file_data = f.read()
在上面的示例中，我们打开了一个文件，在 with 语句下的程序块中进行操作（在这个例子中是读取文件操作），Python 稍后将为我们关闭该文件，不需要再调用f.close()！


在这段代码中，函数 open 将一个文件路径 ('/my_path/my_file.txt') 作为输入用于文件系统，并创建一个文件对象。正如我们所见，'r' 表示这个对象只能用于只读模式。'r' 实际上是默认模式，所以调用 open 时，并不一定要启用该参数。

代码 as f 将通过调用 open 创建的文件对象为变量名 f 赋值 —— 类似于 f = open('/my_path/my_file.txt','r')。

调用 f.read() 时，文件对象 f 读取文件 /my_path/my_file.txt 中的全部内容，所以 f.read() 可创建一个包含该文件文本的字符串对象，并使用该字符串为名为 file_data 的变量赋值。

编码时很容易忘记关闭文件，但 Python 提供了自动关闭文件的特殊语法：即关键字 with。

在 with open(filename) as f: 语句（不要忘记结尾的冒号）之后编写一个缩进的代码块，在其中你可以根据需要任意使用打开的文件对象 f。一旦执行完缩进的代码块，文件将自动关闭。这是另一种作用域（scope） —— 只能通过该缩进代码块中的 f 访问文件中的数据。关闭文件后，将无法与其再进行交互。

open 和文件对象的官方文档见 此处，其中提供了更多示例和解释。

执行示例代码之后，字符串 file_data 即为包含整个文件文本的单个字符串。你可以对该字符串使用所有常用的字符串方法来处理其中的内容。






如何读取
打开一个文件对象查看文件时，就像打开了通往该文件的一扇窗口。
更准确地说，这是一个只有一个字符那么宽，始终从文件最开头开始的字符窗口。
这与阅读书籍或文档截然不同，可以一次查看多个单词甚至多个页面。
将文件看作一个很长的字符串，文件对象只能按顺序一次查看一个字符。



方便的是，Python 使用语法 for line in file 循环读取文件中的行。我可以用该语法来创建文件中的行列表。由于每行仍然有自己的换行符，所以我使用 .strip() 将其删除。

>>> camelot_lines = []
>>> with open("camelot.txt") as f:
...     for line in f:
...         camelot_lines.append(line.strip())
... 
>>> print(camelot_lines)
["We're the knights of the round table", "We dance whenever we're able"]
